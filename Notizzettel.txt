=======================

Modern C++

Peter Loos

Entwicklung / Schulung

C/C++, Java, C#, Mobile Progr.  , JavaScript

Back to the Roots: C++

Guten Morgen

=======================

2 Tools:

== Visual Studio

== Github

=======================

Agenda:

Was sind meine Erwartungen:

== Überblick
== Die Themen  XXX müssen drin sein
== ...
== Multithreading: Yes / No.


-- Von C++ Classic nach Modern C++
-- Unit Test Konzepte
-- Alles was Neu ist :)
-- 


=======================

Donnerstag:
==========

Literatur

Unterschiede zwischen den unterschiedlichen Cast-Operationen

std::bind

Perfect Forwarding

std::variant // Type Traits

Folding

Concepts und Requirements

Benutzerdefinierte Literale

std::transform // std::back_inserter

...............

=======================

== C++ ist eine der, wenn nicht die schwierigste Programmiersprache am Markt.

== C ++ 17 / 20  // Online Compiler

=======================

Was ist eine Referenz:

C++: Referenz: Ähnlich

i)  Alias-Name für ein vorhandenes Objekt / Variable

ii) Hinter den Kulissen: Adresse.

Ähnlichkeiten zum Pointer:

int& n = m;   // ERROR // Keine Null-Referenz

Hauptgrund: Keine KOPIE.

a + b: Ist ein temp. Objekt // es hat KEINEN Namen.

Ab C++ 11:

Es gibt einen ZWEITEN Referenz Typ:

Dieser steht für temp. Objekte.

Syntax: &&

========================================

Move Semantik:

... 480    // temp. Objekt // wird freigegeben
... 100    // Im Vector

Ab C++ 11: Lösung: Move-Semantik




... 550


Frage:

Warum ist der Kopier-Konstruktor vorhanden ???

https://github.com/pelocpp/cpp_clean_performant_secure/blob/master/Clean_Performant_Code/Guidelines/Guidelines_Core_Cpp.md#link8

=========

... 2C0

========

Rule-of-Three:

Zwingend notwendig, wenn Pointer (new / delete) in der Klasse
vorhanden sind.

Wenn nicht:

class Point
{
public:
    int m_x;
    int m_y;
};

Für so eine Klasse muss ich KEINE Spezialmethode realisieren.

==========================================================

C++:

Viele neue Sachen :)

Aber:

Vieles wird auf schon Vorhandenes abgebildet !

zB: Lambda.

"Schon Vorhandene:"   ==> Aufrufbares Objekt
                      Klasse, die den operator() implementiert.

                      ==> Lokale Klassen in einer Funktion, die den operator() implementieren.

Aufrufbares Objekt:

Wozu ???????????????????????????

Sie treten in Erscheinung:

a) bei STL - Algorithmen
b) bei Lambdas
c) bei std::variant
d) sicherlich noch mehr 

Why:  Hmmm: operator() schön .. ist ja wie eine Methode zu sehen:

Wozu operator()  Hmm, ist eine Methode OHNE Namen :)

Sortieren:  compare  ==> In der Doku müsste compare beschrieben werden.

Bei operator() müssen nur noch die Parameter beschrieben werden.

=========================================

Lambda:   Sortieren.

std::sort

Vergleichskriterium:

A) Globale Funktion

B) Aufrufbares Objekt

====================================

Ist Referenz egal oder nicht ??????????????

NICHT:  Syntax.

ABER:   Performanz.

Wie ????

        bool operator() (int n1, int n2) const {

            int z = n1;
00007FF60E7F25CA  mov         eax,dword ptr [n1]  
00007FF60E7F25D0  mov         dword ptr [z],eax  
            int y = n2;
00007FF60E7F25D3  mov         eax,dword ptr [n2]  
00007FF60E7F25D9  mov         dword ptr [y],eax  

        bool operator() (const int& n1, const int& n2) const {

            int z = n1;
00007FF7EA8B8DAB  mov         rax,qword ptr [n1]  
00007FF7EA8B8DB2  mov         eax,dword ptr [rax]  
00007FF7EA8B8DB4  mov         dword ptr [z],eax  
            int y = n2;
00007FF7EA8B8DB7  mov         rax,qword ptr [n2]  
00007FF7EA8B8DBE  mov         eax,dword ptr [rax]  
00007FF7EA8B8DC0  mov         dword ptr [y],eax  

Fazit:

A) Elementare Variablen:

   i) Normalfall: Bin am Wert interessiert: Call by Value / Copy // SCHNELL // KEINE Referenz

   ii) Zweiter Fall: Bin am Original interessiert:
   
           Call by Referenz  // Langsamer // Könnte Original ÄNDERN 
                               oder schützen: const

B) Objekte:

 Sind groß, will man NICHT kopieren ========> Go for &

 ========================================================

 Cpp Insights

 Capture Clause

 ========================================================

 Einem Lambda ist eine Klasse zugeordnet:

 Cpp Insights

 https://cppinsights.io/

========================================================

    struct Struct
    {
        int m_i;
        int m_j;
    };

Die ganze Geschichte:

==============================================

Pause:

std::initializer_list

2 Exercises.

==============================================

std::vector               ====> Daten:  HEAP

std::initializer_list     ====> Daten:  STACK

std::list

=============================================

Aufgabe:

Aufgaben zur Move-Semantik

Einfache Realisierung einer Lambda-Funktion.


=============================================

Weiter:

Besprechung

Smart Pointer

Algorithmen

===================================

auto:

a) Vereinbarung von Variablen

b) auto als Rückgabetyp

c) auto als Parameter

================================================

STL // Container // Algorithmen // Iteratoren

Von Grund auf betrachten ...

Go - for STL // Container // Algorithmen // Iteratoren


13 => 19 => 28 => 42 => 63

Algorithmus:  Neue Länge = Alte Länge * 1.5;  // Mit int-Arithmetik 
                                              // abrunden

================================================

Person p;

C#:   Was ist "Person p;" in C# ???

      Person p = new Person (...);


C++:  Was ist "Person p;" in C++ ???

      Ein komplettes Person Objekt !!!

      Ginge aus:

      Person* p = new Person (...);


In der Tat:

C++ ist deshalb komplexer als C#:

C#:   Referenz-Semantik   (Ausnahme:  struct )

C++:

      Value-Semantik         // Wert-Semantik  // Stack
      Dynamische-Semantik    // Heap

// ==============================================

Konzept der STL:

STL Container             (std::vector)

===> Zugriff auf die Elemente eines Containers

Geht bei manchen Container mit operator[]:

   Sind die sequentiellen Container:
    std::vector
    std::array

STL Container // Zugriff: Transparenz // Austauschbarkeit:

Lösung // Ansatz:

A) STL Container

B) STL Konzept: Position eines Elements in einem Container: Iterator.

B1) Mit diesen Positionen kann man auf JEDEN STL Container zugreifen.

   Position: STL Iterator // Synonym: Position.

C) STL - Algorithmen  // einfache Vorgänge

KONZEPT:   Losen Kopplung

STL Container <=> STL Iteratoren <=> STL Algorithmus


================================================


Was ist using:

using iterator

Wie typedef a la C

========================================

std::make_move_iterator

========================================


Frage: 

Kann man solche Iterationen auch selbst schreiben:

Ja !!!

========================================

for_each

Container c;

for_each (auto elem : c) {
}

Gibt es auch in C++:

Hinweis:
Das KONZEPT der  Losen Kopplung
STL Container <=> STL Iteratoren <=> STL Algorithmus
wurde hiermit über den Haufen geworfen.

// Warum sollten wir Algorithmen einsetzen ??????????????????

Beispiel: Vorbelegung eines Containers.

=====================================

Suchen eines Elements in einem Feld // Container:

for (int i = 0; i < Size(); ++i) {

    if (Container[i] == zuSuchendesElement) {
        break;
    }
}

std::find_if:   Bauerntrick

========================================================

Smart Pointer:
=============

new / delete

int* ptr = new int();
<== ptr übergebe man in die Obhut eines Hüllenobjekts.

Was ist das Problem von / mit new?

Wir vergessen das delete!

Idee:

i) OO

ii) Klassen: Konstruktoren und Destruktoren

iii) Destruktoren: Wann werden die aufgerufen?

     Am Ende des Scopes

     {
         Person p;
         int* ptr;
         Wrapper um einen Zeiger;


     }   // automatisch: Destruktor an p aufgerufen.  // Determinismus

iv)  Objekte und Zeiger zusammenführen:
     Wir betrachten Hüllenobjekte um Zeiger:

     Konstruktor   ==> new
     Destruktor    ==> delete

Grundprinzip:      std::auto_ptr

Verfeinerungen: Haben unterschiedliche Strategien

i) std::unique_ptr

ii) std::shared_ptr / std::weak_ptr

Strategie std::unique_ptr:

Ein std::unique_ptr - Objekt kann zu EINEM Zeitpunkt im Programm nur EINMAL
vorhanden sein.   // man kann das nicht kopieren. // Aber: verschieben !!!!!!!

Strategie std::shared_ptr:

Ein std::shared_ptr - Objekt kann zu EINEM Zeitpunkt im Programm MEHRERE
Besitzer haben.   // man kann es kopieren.

Destruktor: Zu betrachten ....

// Schwache Ähnlichkeiten zum GC Prinzip.

// ====================================================

Wehrmutstropfen:

std::shared_ptr funktioniert nicht immer !!!!!!!!!!!!!!!! WTF

Lösung:

std::weak_ptr:

Whyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy ?

Haben wir zyklische Referenzen ?????????????

Beispiel:

Observer - Pattern ???

Beobachten:

Ziel-Objekt: Zustand // der kann sich ändern

Client-Objekt: Diese interessieren sich für einen Zustandswechsel am Ziel-Objekt.

Aussagen:

== Ein (mehrere) Client-Objekt kennen das Ziel-Objekt.

== Ein Client-Objekt kann sich zu diesem Zweck am Ziel-Objekt anmelden (register // attach).

== Ein Ziel-Objekt kennt ein (mehrere) Client-Objekte, die sich angemeldet haben.


Client-Objekt: kennt Ziel-Objekt.

Ziel-Objekt: kennt Client-Objekte.

Fazit:

Client-Objekte:   std::shared_ptr

Ziel-Objekt:      std::shared_ptr

Im Ziel-Objekt gibt es eine Liste für die Client-Objekte:

std::list  <  XXX  >   XXX = std::weak_ptr

          Folge:       client.lock ()    <====== nullptr


In der Zukunft:  std::shared_ptr  verwendest   <=============

   Könnte das auch ein weak_ptr sein ??????????

   Will ich beim Kopieren eines std::shared_ptr ein weiterer Besitzer sein ???????????

Wie schaffe ich das in C#  ????

Events:   +=  oder -=  abmelden.

Delegates:  Wo kein -=:  Referenz-Count geht nicht auf 0.

==========================================================

const 

constexpr

Problem:   Wie / wo kann man dieses Feature in der Praxis einsetzen ???

Embedded Programmer:

Vieles kann man aus der kritischen Laufzeit (statischen Tabellen) rausziehen.

in C#:

https://github.com/dotnet/roslyn/issues/15079

=======================================================

Smart Pointer:
=============

=======================================================

Mittwoch:
---------

std::optional - check

Structured Binding - check

std::tuple - check

std::array - check


---

SSO - check

std::string_view - check

---

Variadic Templates - check

emplace - check

---

noexcept  - check

=======================================================

int value;    <=== Wert

if (value == 0)   ...

if (value == -1)   ...

if (value == -MaxInt)   ...

Frage: Haben wir einen Wert oder nicht ...

int  value;    <=== Wert        ???? 
bool hasValue;  true / false    false !!!

Paar ===> std::optional

C#:   int? value;

===========================================

explicit

Womit ist ein std::tuple ähnlich ???

Ein std::tuple ist wie eine struct - für Schreibfaule.


=========================================================

SSO: Feature

Small String Optimization

Optimierung für kurze Zeichenketten.

std::string

=========================================================

Online Compiler:  Easy Going   ... um was auszuprobieren ...

https://wandbox.org/


======================================================

C/C++:

C ist in C++ enthalten !!!

C-Style Arrays:

int zahlen [10];  // Fixed-Size Array

versus

std::array <int, 10> zahlen;  // Fixed-Size Array

2 Optionen

std::array ist in Wahrheit eine Hülle / ein Wrapper um ein C-Style Array

Frage: Why should we go for std::array ????????

==============================================

int zahlen [10];  // Fixed-Size Array

Wie übergebe ich dieses Feld an ein Unterprogramm ????

void unterprogramm (int* anfang, size_t length)
{
    // Wie lange ist der Speicherbereich hinter ptr ???????

    // Ein Pointer beschreibt keine Länge: Array Decay // verkümmern
}

unterprogramm (zahlen, 10);

1. große Vorteil von std::array:  Size !!!

2. große Vorteil : Robustheit

zahlen[i] = 123;    // hier wird i NICHT überprüft

Why: Performanz

std::array: zahlen.at(i) = 123;   // hier wird i überprüft !!!

Langsamer: Jepp

3. große Vorteil : for_each // Range-based Loop

4. Vorteil: nützliche Methoden: fill zB

5. Vorzeil: copying via operator= is supported
            operator== compiles and does expected value comparison

6. Vorteil: Funktionen können ein std::array zurückliefern !!! Kein C-Style Array

Offenes Problem: std::array "elegant" an Unterprogramme übergeben.

7. Vorteil: 

std::array   ==>  std::span  
std::vector  ==>  std::span  

"Spanne" :  Anfang und die Länge

=========================================

std::array<T>        FIXED-SIZE

std::vector<T>       Variable Sized

Beim Iterieren:

std::array<T> kann im globalen Datensegment / am Stack liegen:
Da ist der Zugriff DIREKT

std::vector<T> kann im globalen Datensegment / am Stack liegen:
ABER DIE ELEMENTE LIEGEN AM HEAP
Damit ist der Zugriff auf die Elemente INDIREKT

Weiß ist die Anzahl der Elemente von vorneherein: IMMER go - for - std::array<T>
Ein FIXED-SIZE Container ist schneller.

// =========================================
// Gegenüberstellung:

void main()
{
   unterprogramm();  // wenige, kleine Zwischenergebnisse 
}

// Anzahl der BigData in etwa bekannt.

static std::array<T> g_data;  // global variable
static std::vector<T> g_data;

void unterprogramm()
{
    std::vector<T> data;   // T = BigData
    vs.
    std::array<T> data;    // T = BigData  // EHER NICHT ... ABER
    vs.
    std::array<T>* pdata = new std::array<T>;  // NOOOOOOOOOOOOOOO
}

=======================================================

Wann kann man No-throw Garantie aussprechen:

Einfache Methoden 

Nur Wertzuweisungen.

Wenn das der Fall ist: noexcept.

==> Optimierung: Es wird kein Code für das Eintreten von Ausnahmen abgesetzt.

=======================================================

Zeichenketten:

a) const char* cp = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";  C-Zeichenkette: 

b) std::string

Frage:
=====

"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"

Wo liegt diese ????

Wo liegt diese NICHT ???? HEAP

Häufig / manchmal:

Konstante Zeichenketten:

Diese sollten /  müssen nicht am HEAP liegen !!!
Ansonsten: Indirekten Zugriff:

// es geht nicht um KURZE Zeichenketten
std::string s {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};

Das geht performanter:


Beispiel:  std::string_view

const char* ptrStart;

==> substr (8, 5);  8 = Offset, 5 = Länge

std::string_view sub;

const char* ptrStart + 8;
size_t len = 5;

std::cout  // println 

Go for std::string_view - soweit es geht

a) Konstante Zeichenkette

b) Wenn keine explizite Zeichenkettenverarbeitung:

   .insert


======================================

Variadische Templates

"..."

a) Werdet ihr ab nächster vermutlich nicht verwenden.

b) Whyyyyyyyyyyyyyyy ???

Transport von Daten von A nach B // Typsicher // Performant

Verständnis 

emplace / C++  11

// =======================================

C++          Bjarne Stroustrup   // C++ with Classes // OO

Templates:   Alexander Stepanov

                            // Generische Programmierung

Bibliothek:  STL   // Templates 

==================================================

std::vector<int> fibo;
fibo.resize (20);

std::generate (
  fibo.begin(), 
  fibo.end(), 
  [] () {}      // irgendwie braucht man die "alten" Werte,
                // um die nächste Fibo-Zahl zu berechnen
 );

 
==================================================

Donnerstag:
===========

peter.loos@gmx.de
-----------------

Literatur

Unterschiede zwischen den unterschiedlichen Cast-Operationen

std::bind

Perfect Forwarding

// Pause 

std::variant // Type Traits

Folding

Concepts und Requirements

Benutzerdefinierte Literale

std::transform // std::back_inserter

Unit Test Konzepte


std::bind:  Hülle // Wrapper 

Alternative:  Lambda


// ================================================

// Folding

Modernes C++:

Einen Operator:

int n = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9;

int n = (((1 + 2) + 3) + 4) + 5 + 6 + 7 + 8 + 9;

int n = n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9;

Performanz-Hub: Folding  // Abrollen.

n1, n2, n3 ====>  Parameter einer Funktion:

Folding:  Bonus-Track:

Viele Funktionen der REIHE nach ausführen.

=========================================================

Was kann der std::variant ?

Er kann Daten unterschiedlichen Typs aufnehmen,
zu einem Zeitpunkt aber nur EINEN Wert.

Hat Ähnlichkeiten zu einer Union.

Beispiel:

Excel-Sheet:  Zelle // Cell:

Zeichenkette, numerischer Wert, Datum, Währung (Currency), ...

Cell ==> std::variant.

Ähnliche Klasse:  std::any 

std::variant:   Man kann einen std::variant "besuchen" :)

Java // C#:  Reflection

C++:         Reflection "für Arme"

<type_traits>   Typ Spuren


Interesse:    C++ Metaprogramming.

==============================================

std::any - check

Benutzerdefinierte Literale // Konstante - check

std::transform // std::back_inserter

Book- Store

The Return of printf: std::print(ln) in C++ 23

==============================================

Benutzerdefinierte Literale // Konstante:

123

123.456

123.456f

123l

123ll

Frage:

123_km
123_pfund
123_euros
123_farbe     class Color

"14:09:30"_uhrzeit

"22.05.2025"_datum

"4412308"_iban  => IBAN  // Klasse:  DE 

Das GEHT IN C++ !!!

Programmiersprache:

Lexikon: Umfasst alle Wörter der Sprache.

== 123
== if, then,
== temperature, value

Syntax

C++: Das Lexikon von C++ ist erweiterbar.

Beispiel:

123_rgb ;   //   class Color

UDL : user defined literal

Wie geht's:   operator""    Literal - Operator

Binäre Darstellung:  Zweier-Komplement

57 im  Zweier-Komplement:

57 / 2 = 28 Rest 1
28 / 2 = 14 Rest 0
14 / 2 = 7 Rest  0
7 / 2 = 3 Rest   1
3 / 2 = 1 Rest   1
1 / 2 = 0 Rest   1

11'1001

==============================================

Viele Algorithmen, die - in irgend einer Weise - von A nach B arbeiten:

Kopieren: von A nach B   std::copy

Umwandeln: von A nach B  std::transform

setzen intern den operator= ein.

ABER:

Es gibt einen Schalter:  von operator=   nach push_back:

Da nehmen wir einen Adapter: von operator=   nach push_back:

std::back_inserter: Dieser Adapter ruft push_back auf !!!!!

======================================================

Finale: All - In.


== std::variant

== Variadische Templates

== Homogene vs. heterogene Container

== Generische Lambda-Funktionen

== Dynamischer vs. statischer Polymorphismus


Praxis-nahem Beispiel:  Buchhandlung // Bookstore.

C# - Developer:
---------------

  Universelle Basisklasse Object: "Alles leitet sich von Object ab"

  'List' als eine Art flex. großer Container: Da kann alles rein.

  Ist so eine Art  "heterogener Container"

C++ - Developer:
----------------

  std::vector:   Vom Typ T:    Homogener Container: Jedes Element ist vom Typ T.

  Heterogener Container: Ginge auf die Art

                         std::vector < std::variant <

Praxis-nahem Beispiel:  Buchhandlung // Bookstore.
==================================================

Bookstore:

Verwaltet verschiedene Medien:

== Book
== CD
== DVD
== BlueRay
== Vinyl

2 Ansätze vorstellen:

a) Klassisch: Interface // Schnittstellenkonzept // Vererbung

   Im Stile (dynamischer) Polymorphismus

b) Modern: std::variant, Variadische Templates, Generische Lambda-Funktionen

   Im Stile (statischer) Polymorphismus

==> Abschnitt "Type Erasure":

STL:  std::function, std::variant und std::any: Dieses Konzept verwenden.

==========================================================

a) Classic Style:

========================================================

Virtuelle Methoden:

"sind die nebeneinander":

Ähnlich: 

A) Wenn eine Klasse virtuelle Methoden hat:

  Dann bekommt sie zusätzlich - pro Klasse - eine Tabelle (Array) hinzugefügt.

  vtable : virtual function pointer table.

B) Was steht in diesem Array drin: Pro virtueller Methode deren Adresse.

C) Wenn eine virtuelle Methode aufgerufen wird:

   NEIN: obj.function();  // Adresse

   Class Foo::tabelle[index_der_Methode] : indirekte Aufruf.

https://pabloariasal.github.io/2017/06/10/understanding-virtual-tables/

// ==============================================================

2. Ansatz:

